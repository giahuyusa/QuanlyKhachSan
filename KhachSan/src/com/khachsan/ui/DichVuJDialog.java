/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.khachsan.ui;

import com.khachsan.dao.ChiTietPhieuDichVuDAO;
import com.khachsan.dao.DichVuDAO;
import com.khachsan.dao.PhieuDichVuDAO;
import com.khachsan.utils.Jdbc;
import com.khachsan.utils.MsgBox;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nguye
 */
public class DichVuJDialog extends javax.swing.JDialog {

    private DichVuDAO dao = new DichVuDAO();
    private PhieuDichVuDAO pdv = new PhieuDichVuDAO();
    private ChiTietPhieuDichVuDAO ctpdv = new ChiTietPhieuDichVuDAO();

    /**
     * Creates new form DichVuJDialog
     */
    public DichVuJDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabs = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstDichVu = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblListDV = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        btnThem = new javax.swing.JButton();
        btnMoi = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtSoLuong = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        btnCreate = new javax.swing.JButton();
        btnDeletePDV = new javax.swing.JButton();
        txtMaPDV = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        txtTimKiemPDP = new javax.swing.JTextField();
        txtTimKiemP = new javax.swing.JTextField();
        btnTimKiem = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDichVu = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lstDichVu.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5", "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(lstDichVu);

        tblListDV.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Dịch Vụ", "Đơn Giá", "Số Lượng", "Thành Tiền"
            }
        ));
        jScrollPane2.setViewportView(tblListDV);

        btnThem.setText("Thêm");
        btnThem.setPreferredSize(new java.awt.Dimension(85, 30));
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });
        jPanel7.add(btnThem);

        btnMoi.setText("Làm Mới");
        btnMoi.setPreferredSize(new java.awt.Dimension(85, 30));
        btnMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoiActionPerformed(evt);
            }
        });
        jPanel7.add(btnMoi);

        btnUpdate.setText("Sửa");
        btnUpdate.setPreferredSize(new java.awt.Dimension(85, 30));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        jPanel8.add(btnUpdate);

        btnDelete.setText("Xóa");
        btnDelete.setPreferredSize(new java.awt.Dimension(85, 30));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jPanel8.add(btnDelete);

        jLabel4.setText("Số lượng:");

        txtSoLuong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSoLuongActionPerformed(evt);
            }
        });

        btnCreate.setText("Tạo");
        btnCreate.setPreferredSize(new java.awt.Dimension(85, 30));
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });
        jPanel9.add(btnCreate);

        btnDeletePDV.setText("Xóa");
        btnDeletePDV.setPreferredSize(new java.awt.Dimension(85, 30));
        btnDeletePDV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePDVActionPerformed(evt);
            }
        });
        jPanel9.add(btnDeletePDV);

        txtMaPDV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaPDVActionPerformed(evt);
            }
        });

        jLabel3.setText("PHIẾU DỊCH VỤ");

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "PHIẾU ĐẶT PHÒNG - PHÒNG", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 18), new java.awt.Color(0, 153, 153))); // NOI18N
        jPanel3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.LINE_AXIS));

        txtTimKiemPDP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTimKiemPDPActionPerformed(evt);
            }
        });
        jPanel3.add(txtTimKiemPDP);

        txtTimKiemP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTimKiemPActionPerformed(evt);
            }
        });
        jPanel3.add(txtTimKiemP);

        btnTimKiem.setText("Tìm");
        btnTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemActionPerformed(evt);
            }
        });
        jPanel3.add(btnTimKiem);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtSoLuong)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(0, 0, Short.MAX_VALUE)))))
                        .addGap(27, 27, 27))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtMaPDV, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 461, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMaPDV, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSoLuong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(63, 63, 63))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 2, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );

        tabs.addTab("CẬP NHẬT", jPanel1);

        tblDichVu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PHÒNG", "TỔNG TIỀN"
            }
        ));
        tblDichVu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDichVuMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDichVu);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 904, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
        );

        tabs.addTab("DANH SÁCH", jPanel2);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 153));
        jLabel1.setText("QUẦY DỊCH VỤ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabs)
            .addGroup(layout.createSequentialGroup()
                .addGap(353, 353, 353)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 517, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblDichVuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDichVuMouseClicked

    }//GEN-LAST:event_tblDichVuMouseClicked

    private void txtTimKiemPDPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTimKiemPDPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTimKiemPDPActionPerformed

    private void btnTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimKiemActionPerformed
        // TODO add your handling code here:
        this.find();
        this.fillTable();
    }//GEN-LAST:event_btnTimKiemActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        try {
            // TODO add your handling code here:
            this.them();
        } catch (SQLException ex) {
            Logger.getLogger(DichVuJDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.fillTable();
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoiActionPerformed
        this.clearForm();
    }//GEN-LAST:event_btnMoiActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        this.update();
        this.fillTable();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        this.delete();
        this.fillTable();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtSoLuongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSoLuongActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSoLuongActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        this.create();
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnDeletePDVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePDVActionPerformed
        // TODO add your handling code here:
        this.deletePDV();
    }//GEN-LAST:event_btnDeletePDVActionPerformed

    private void txtMaPDVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaPDVActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaPDVActionPerformed

    private void txtTimKiemPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTimKiemPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTimKiemPActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DichVuJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DichVuJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DichVuJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DichVuJDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DichVuJDialog dialog = new DichVuJDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    void init(){
    this.setLocationRelativeTo(null);
    this.setTitle("KHACH SAN - QUAN LY DAT PHONG");
    this.fillDichVuList();
}
    
    void find() {
        String maPhong = txtTimKiemP.getText(); // Lấy mã phòng từ trường nhập liệu
        String maPDP = txtTimKiemPDP.getText();
        if (isPhieuDichVuExist(maPhong, maPDP)) {
            javax.swing.JOptionPane.showMessageDialog(this, "Thành công.");
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Mã phòng này chưa có phiếu dịch vụ.");
        }
    }

    void them() throws SQLException {
        String maPDV = txtMaPDV.getText();

        // Lấy dịch vụ được chọn từ danh sách lstDichVu
        String maDV = lstDichVu.getSelectedValue(); // Giả sử lstDichVu là một JList hoặc tương tự

        // Lấy số lượng từ trường txtSoLuong
        int soLuong = Integer.parseInt(txtSoLuong.getText());

        // Thực hiện thêm dịch vụ vào phiếu dịch vụ
        boolean result = dao.insertServiceIntoVoucher(maPDV, maDV, soLuong);

        // Cập nhật giao diện người dùng theo kết quả
        if (result) {
            // Cập nhật bảng dịch vụ trong phiếu dịch vụ
            List<Object[]> services = dao.selectServicesForVoucher(maPDV);
            DefaultTableModel model = (DefaultTableModel) tblListDV.getModel();
            model.setRowCount(0); // Xóa dữ liệu cũ

            // Thêm dữ liệu mới vào bảng
            for (Object[] service : services) {
                model.addRow(service);
            }

            // Thông báo thêm dịch vụ thành công
            MsgBox.alert(this, "Thêm dịch vụ thành công");
        } else {
            // Thông báo lỗi khi thêm dịch vụ
            MsgBox.alert(this, "Dịch vụ này đã có ");
        }
    }

    void update() {
        int selectedRow = tblListDV.getSelectedRow();
        if (selectedRow != -1) {
            // Lấy giá trị từ các ô trong hàng đã chọn
            String tenDV = (String) tblListDV.getValueAt(selectedRow, 0);
            double donGia = ((Number) tblListDV.getValueAt(selectedRow, 1)).doubleValue();
            int soLanSuDung = (Integer) tblListDV.getValueAt(selectedRow, 2);

            // Lấy mã dịch vụ từ tên dịch vụ
            String maDV = dao.getMaDVByTenDV(tenDV);
            if (maDV == null) {
                MsgBox.alert(this, "Không tìm thấy dịch vụ" + tenDV);
                return;
            }

            // Lấy mã phiếu dịch vụ từ trường txtMaPDV
            String maPDV = txtMaPDV.getText();

            // Lấy số lượng mới từ trường txtSoLuong
            int soLuongMoi = Integer.parseInt(txtSoLuong.getText());

            // Cập nhật số lượng mới vào cơ sở dữ liệu
            boolean result = dao.updateServiceQuantity(maPDV, maDV, soLuongMoi);

            if (result) {
                // Tính toán thành tiền mới và cập nhật bảng
                List<Object[]> services = dao.selectServicesForVoucher(maPDV);
                DefaultTableModel model = (DefaultTableModel) tblListDV.getModel();
                model.setRowCount(0); // Xóa dữ liệu cũ

                // Thêm dữ liệu mới vào bảng
                for (Object[] service : services) {
                    model.addRow(service);
                }

                // Thông báo cập nhật thành công
                MsgBox.alert(this, "Cập nhật dịch vụ thành công !");
            } else {
                // Thông báo lỗi khi cập nhật dịch vụ
                MsgBox.alert(this, "Không thể cập nhật dịch vụ !");
            }
        } else {
            // Thông báo khi không chọn hàng nào
            MsgBox.alert(this, "Vui lòng chọn dịch vụ cần cập nhật !");
        }
    }

    void delete() {
        int selectedRow = tblListDV.getSelectedRow(); // Lấy chỉ số hàng được chọn trong JTable

        if (selectedRow >= 0) {
            // Lấy mã dịch vụ từ hàng được chọn
            String tenDV = (String) tblListDV.getValueAt(selectedRow, 0); // Giả sử tên dịch vụ ở cột 0

            // Xác định mã dịch vụ từ tên dịch vụ
            String maDV = dao.getMaDVByTenDV(tenDV);
            if (maDV != null) {
                // Lấy mã phiếu dịch vụ từ JTextField
                String maPDV = txtMaPDV.getText().trim();

                if (maPDV != null && !maPDV.isEmpty()) {
                    // Xóa dịch vụ khỏi cơ sở dữ liệu
                    boolean isDeleted = dao.deleteServiceFromVoucher(maPDV, maDV);

                    if (isDeleted) {
                        // Cập nhật bảng sau khi xóa thành công
                        updateTable();
                        MsgBox.alert(this, "Dịch vụ đã được xóa thành công");
                    } else {
                        MsgBox.alert(this, "Không thể xóa dịch vụ này !");
                    }
                } else {
                    MsgBox.alert(this, "Mã phiếu dịch vụ không hợp lệ !");
                }
            } else {
                MsgBox.alert(this, "Không tìm thấy mã dịch vụ !");
            }
        } else {
            MsgBox.alert(this, "Vui lòng chọn dịch vụ cần xóa !");
        }
    }

    void create() {
        String maPhong = txtTimKiemP.getText(); // Lấy mã phòng từ trường nhập liệu
        String maPDP = txtTimKiemPDP.getText(); // Lấy mã phiếu đặt phòng từ trường nhập liệu

        // Kiểm tra xem đã có phiếu dịch vụ cho mã phòng và mã phiếu đặt phòng đó chưa
        if (isPhieuDichVuExist(maPhong, maPDP)) {
            javax.swing.JOptionPane.showMessageDialog(this, "Phiếu dịch vụ đã tồn tại cho mã phòng và mã phiếu đặt phòng này.");
        } else {
            // Gọi phương thức DAO để chèn dữ liệu và lấy mã phiếu dịch vụ mới
            String maPDV = dao.insertPhieuDichVu(maPhong, maPDP);

            if (maPDV != null) {
                // Cập nhật txtMaPDV với mã phiếu dịch vụ mới
                txtMaPDV.setText(maPDV);

                // Hiển thị thông báo thành công
                javax.swing.JOptionPane.showMessageDialog(this, "Phiếu dịch vụ đã được tạo thành công!");
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "Có lỗi xảy ra khi tạo phiếu dịch vụ.");
            }
        }
    }

    void deletePDV() {
        String maPDV = txtMaPDV.getText();

        if (maPDV.isEmpty()) {
            MsgBox.alert(this, "Vui lòng chọn phiếu dịch vụ để xóa.");
            return;
        }

        boolean isUsed = dao.isServiceUsed(maPDV);

        if (isUsed) {
            MsgBox.alert(this, "Không thể xóa phiếu dịch vụ này vì đã sử dụng dịch vụ.");
        } else {
            boolean deleted = dao.deletePhieuDichVu(maPDV);
            if (deleted) {
                MsgBox.alert(this, "Phiếu dịch vụ đã được xóa thành công.");
                fillTable(); // Cập nhật lại bảng sau khi xóa
                txtMaPDV.setText(""); // Xóa mã PDV
            } else {
                MsgBox.alert(this, "Có lỗi xảy ra khi xóa phiếu dịch vụ.");
            }
        }
    }

    void fillTableChiTietPhieuDichVu() {
        String maPDV = txtMaPDV.getText();
        List<Object[]> services = dao.selectServicesForVoucher(maPDV);
        DefaultTableModel model = (DefaultTableModel) tblListDV.getModel();
        model.setRowCount(0); // Xóa dữ liệu cũ

        // Thêm dữ liệu mới vào bảng
        for (Object[] service : services) {
            model.addRow(service);
        }

    }

    private void fillTable() {
        DefaultTableModel model = (DefaultTableModel) tblDichVu.getModel();
        model.setRowCount(0); // Xóa dữ liệu hiện có

        // Lấy giá trị từ các trường nhập liệu
        String maPhong = txtTimKiemP.getText();
        String maPDP = txtTimKiemPDP.getText();

        // Gọi phương thức dao để lấy dữ liệu
        List<Object[]> list = dao.selectTable(maPhong, maPDP);

        if (!list.isEmpty()) {
            // Cập nhật txtMaPDV với giá trị từ dòng đầu tiên nếu cần
            Object[] firstRow = list.get(0);
            txtMaPDV.setText((String) firstRow[1]); // Cập nhật mã PDV

            // Thêm dữ liệu vào JTable
            for (Object[] row : list) {
                model.addRow(new Object[]{
                    row[0], // MaPhong
                    row[2] // TongTien
                });
            }
        }
        this.fillTableChiTietPhieuDichVu();
    }

    private void fillDichVuList() {
        DefaultListModel<String> model = new DefaultListModel<>();
        List<String> list = dao.selectListDV();
        for (String dichVu : list) {
            model.addElement(dichVu);
        }
        lstDichVu.setModel(model);
    }

    // Phương thức kiểm tra sự tồn tại của phiếu dịch vụ
    private boolean isPhieuDichVuExist(String maPhong, String maPDP) {
        String sql = "SELECT COUNT(*) FROM PhieuDichVu WHERE MaPhong = ? AND MaPDP = ?";
        try (Connection conn = Jdbc.getConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, maPhong);
            ps.setString(2, maPDP);

            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(1) > 0;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Error: " + e.getMessage());
        }
        return false;
    }

    private void updateTable() {
        String maPDV = txtMaPDV.getText().trim();
        List<Object[]> services = dao.selectServicesForVoucher(maPDV);
        DefaultTableModel model = (DefaultTableModel) tblListDV.getModel();
        model.setRowCount(0); // Xóa dữ liệu hiện tại
        for (Object[] service : services) {
            model.addRow(service);
        }
    }

    private void clearForm() {
        txtTimKiemPDP.setText("");
        txtTimKiemP.setText("");
        txtSoLuong.setText("");
        txtMaPDV.setText("");
        clearTable(tblListDV);
        clearTable(tblDichVu);
    }

    private void clearTable(JTable table) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0); // Xóa tất cả các hàng
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeletePDV;
    private javax.swing.JButton btnMoi;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnTimKiem;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> lstDichVu;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblDichVu;
    private javax.swing.JTable tblListDV;
    private javax.swing.JTextField txtMaPDV;
    private javax.swing.JTextField txtSoLuong;
    private javax.swing.JTextField txtTimKiemP;
    private javax.swing.JTextField txtTimKiemPDP;
    // End of variables declaration//GEN-END:variables
}
